package set;

import java.util.NoSuchElementException;
import java.util.ArrayList;
import java.util.Iterator;


public class MaxSet<E extends Comparable<E>> extends ArraySet<E> {
	private E maxElement;
	
	/**
	 * Constructs a new empty set.
	 */
	public MaxSet() {
		super();
	}
	
	/** Returns the currently largest element in this set. 
	pre: the set is not empty 
	post: the set is unchanged 
	@return the currently largest element in this set 
	@throws NoSuchElementException if this set is empty 
	*/ 
	public E getMax() {
		if(! super.isEmpty()){
			while(super.iterator().hasNext()){
				if(super.iterator().next().compareTo(maxElement) < 0){
					maxElement = iterator().next();
				}
			}
			return maxElement;
		}
		throw new NoSuchElementException();
	}
	
	/** 
	 * Adds the specified element to this set, if it is not already present.
	 * post: x is added to the set if it is not already present
	 * @param  x the element to be added
	 * @return true if the specified element was added
	 */
	@ Override
	public boolean add(E x) {
			if(maxElement == null || x.compareTo(maxElement)<0){
				maxElement = x;
			}
		return super.add(x);
	}
	
	/** 
	 * Removes the specified element from this set if it is present. 
	 * post: 	x is removed if it was present
	 * @param 	x the element to remove - if present
	 * @return true if the set contained the specified element
	 */
	@ Override
	public boolean remove(Object x) {
		if(x == maxElement){
			maxElement = null;
		}
		return super.remove(x);
	}
	
	/** Adds all of the elements in the specified set, for which it is 
	possible, to this set. 
	post: all elements, for which it is possible, in the 
	specified set are added to this set. 
	@return true if this set changed as a result of the call 
	*/
	@ Override
	public boolean addAll(SimpleSet<? extends E> c) {
		return super.addAll(c);
	}
	
	/**
	 * Sorterar listan med unika tal och returnerar dem i stigande ordning
	 * @param lista som ska bli sorterad
	 * @return sorterad lista
	 */
	public static int[] uniqueElements(int[] ints){
		int temp;
		boolean b = true; 
		ArrayList<Integer> list = new ArrayList<Integer>();
		int[] sorted;
		
		
		for(int i = 0; i<ints.length; i++){
			temp = ints[i];
			for(int k = i+1; k<ints.length; k++){
				
				if(temp == ints[k]){
					b = false;
					break;
				}
			}
			if(b){
				list.add(temp);
				}
				b = true;
		}
		sorted = new int[list.size()];
		for(int i = 0; i<list.size(); i++){
			sorted[i] = list.get(i);
		}
		
		for (int i = 1; i < sorted.length; i++) {
			int nextVal= sorted[i];
			int nextPos = i;
			while (nextPos > 0 &&
			nextVal < sorted[nextPos - 1]) {
			sorted[nextPos] = sorted[nextPos - 1];
			nextPos--;
			}
			sorted[nextPos] = nextVal;
			}
		return sorted;
	}
	 
}